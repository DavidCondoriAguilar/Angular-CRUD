import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class NgxSearchPipe {
    transform(items, searchText) {
        if (items && searchText) {
            return items.filter(item => {
                let flat = {};
                const flatObject = (obj) => {
                    Object.keys(obj).forEach((key) => {
                        if (typeof obj[key] === 'object' && obj[key] !== null) {
                            const flatChildObject = flatObject(obj[key]);
                            Object.keys(flatChildObject).forEach((childKey) => {
                                flat[`${key}.${childKey}`] = flatChildObject[childKey];
                            });
                        }
                        else
                            flat[key] = obj[key];
                    });
                    return flat;
                };
                return Object.values(flatObject(item)).join(' ').toLowerCase().includes(searchText.toLowerCase());
            });
        }
        return items || [];
    }
}
NgxSearchPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NgxSearchPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
NgxSearchPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.4", ngImport: i0, type: NgxSearchPipe, name: "ngxSearchPipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NgxSearchPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'ngxSearchPipe'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNlYXJjaC1waXBlLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2VhcmNoLXBpcGUvc3JjL2xpYi9uZ3gtc2VhcmNoLXBpcGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFLcEQsTUFBTSxPQUFPLGFBQWE7SUFDeEIsU0FBUyxDQUFDLEtBQStCLEVBQUUsVUFBZTtRQUN4RCxJQUFJLEtBQUssSUFBSSxVQUFVLEVBQUU7WUFDdkIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN6QixJQUFJLElBQUksR0FBUSxFQUFFLENBQUM7Z0JBRW5CLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBUSxFQUFPLEVBQUU7b0JBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7d0JBQ3ZDLElBQUksT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUU7NEJBQ3JELE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs0QkFFN0MsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFnQixFQUFFLEVBQUU7Z0NBQ3hELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs0QkFDekQsQ0FBQyxDQUFDLENBQUM7eUJBQ0o7OzRCQUNDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3pCLENBQUMsQ0FBQyxDQUFDO29CQUVILE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQztnQkFFRixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUNwRyxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7OzBHQTFCVSxhQUFhO3dHQUFiLGFBQWE7MkZBQWIsYUFBYTtrQkFIekIsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsZUFBZTtpQkFDdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ25neFNlYXJjaFBpcGUnXG59KVxuZXhwb3J0IGNsYXNzIE5neFNlYXJjaFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGl0ZW1zOiBhbnlbXSB8IG51bGwgfCB1bmRlZmluZWQsIHNlYXJjaFRleHQ6IGFueSk6IGFueVtdIHtcbiAgICBpZiAoaXRlbXMgJiYgc2VhcmNoVGV4dCkge1xuICAgICAgcmV0dXJuIGl0ZW1zLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgbGV0IGZsYXQ6IGFueSA9IHt9O1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZmxhdE9iamVjdCA9IChvYmo6IGFueSk6IGFueSA9PiB7XG4gICAgICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gJ29iamVjdCcgJiYgb2JqW2tleV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgY29uc3QgZmxhdENoaWxkT2JqZWN0ID0gZmxhdE9iamVjdChvYmpba2V5XSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBPYmplY3Qua2V5cyhmbGF0Q2hpbGRPYmplY3QpLmZvckVhY2goKGNoaWxkS2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBmbGF0W2Ake2tleX0uJHtjaGlsZEtleX1gXSA9IGZsYXRDaGlsZE9iamVjdFtjaGlsZEtleV07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIGZsYXRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgIH0pO1xuICBcbiAgICAgICAgICByZXR1cm4gZmxhdDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhmbGF0T2JqZWN0KGl0ZW0pKS5qb2luKCcgJykudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBpdGVtcyB8fCBbXTtcbiAgfVxufSJdfQ==